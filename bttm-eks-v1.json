{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation stack for Kubernetes cluster",

  "Parameters" : {

    "StackRegion": {
    "Description" : "Region to be used",
    "Type" : "String",
    "Default": "eu-west-3"
    },

    "VPCCIDRBlock": {
      "Description": "VPC CidrBlock",
      "Type": "String",
      "Default": "10.0.0.0/16"
    },

    "PublicSubnet1aCIDR": {
      "Description": "Public 1A Subnet CIDR",
      "Type": "String",
      "Default": "10.0.0.0/20"
    },

    "PublicSubnet1bCIDR": {
      "Description": "Public 1B Subnet CIDR",
      "Type": "String",
      "Default": "10.0.16.0/20"
    },

    "PrivateSubnet1aCIDR": {
      "Description": "Private 1A Subnet CIDR",
      "Type": "String",
      "Default": "10.0.32.0/20"
    },

    "PrivateSubnet1bCIDR": {
      "Description": "Private 1B Subnet CIDR",
      "Type": "String",
      "Default": "10.0.48.0/20"
    },

    "BastionKeyName": {
      "Description": "RSA key name to be crated for Bastion hosts",
      "Type": "String",
      "Default": "bastion"
    },

    "BastionInstanceType": {
      "Description": "Bastion hosts instance type",
      "Type": "String",
      "Default": "t3.nano"
    },

    "OfficeNetwork1": {
      "Description": "Allow office-1 CIDR",
      "Type": "String",
      "Default": "0.0.0.0/0"
    },

    "NotifyEmail": {
      "Description": "Send notifications to",
      "Type": "String",
      "Default": "betterme-devops@betterme.world"
    },

    "WorkerNodesKeyName": {
      "Description": "RSA key name to be crated for Bastion hosts",
      "Type": "String",
      "Default": "worker-node"
    }
  },

  "Mappings": {

    "RegionAvailabilityZones": {
      "eu-west-1": {
        "1a": "eu-west-1a",
        "1b": "eu-west-1b"
      },
      "eu-west-3": {
        "1a": "eu-west-3a",
        "1b": "eu-west-3b"
      },
      "us-east-1": {
        "1a": "us-east-1a",
        "1b": "us-east-1b"
      }
    },

    "AWSRegionImageID" : {
      "eu-west-1": {
        "bastion": "ami-06d77f4fcb1f698eb",
        "eksworker": "ami-03772b2e67db0c87b"
      },
      "eu-west-3": {
        "bastion": "ami-06ec92fd1162f8e8d",
        "eksworker": "ami-0db9a057d2e5a2554"
      },
      "us-east-2": {
        "bastion": "ami-01bb3992977bdc1b7",
        "eksworker": "ami-07f54fc065c3da9d7"
      }
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : {"Ref" : "VPCCIDRBlock"},
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "vpc"] ] } }
        ]
      }
    },

    "PublicSubnet1A" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref" : "PublicSubnet1aCIDR"},
        "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionAvailabilityZones", {"Ref" : "StackRegion"}, "1a" ] },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "public-net-1a"] ] } }
        ]
      }
    },

    "PublicSubnet1B" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref" : "PublicSubnet1bCIDR"},
        "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionAvailabilityZones", {"Ref" : "StackRegion"}, "1b" ] },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "public-net-1b"] ] } }
        ]
      }
    },

    "PrivateSubnet1A" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref" : "PrivateSubnet1aCIDR"},
        "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionAvailabilityZones", {"Ref" : "StackRegion"}, "1a" ] },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "private-net-1a"] ] } }
        ]
      }
    },

    "PrivateSubnet1B" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {"Ref" : "PrivateSubnet1bCIDR"},
        "AvailabilityZone" : { "Fn::FindInMap" : [ "RegionAvailabilityZones", {"Ref" : "StackRegion"}, "1b" ] },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "private-net-1b"] ] } }
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "igw"] ] } }
        ]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },

    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "public-rtb"] ] } }
        ]
      }
    },

    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },

    "PublicSubnetRouteTableAssociation1a": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "PublicRouteTable",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1A"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "PublicSubnetRouteTableAssociation1b": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": "PublicRouteTable",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet1B"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },

    "NatGwIPAddress1a" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "NatGwIPAddress1b" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "NATGW1a" : {
      "DependsOn" : "NatGwIPAddress1a",
      "Type" : "AWS::EC2::NatGateway",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["NatGwIPAddress1a", "AllocationId"]},
        "SubnetId" : { "Ref" : "PublicSubnet1A"},
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "nat-gw-1a"] ] } }
        ]
      }
    },

    "NATGW1b" : {
      "DependsOn" : "NatGwIPAddress1b",
      "Type" : "AWS::EC2::NatGateway",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["NatGwIPAddress1b", "AllocationId"]},
        "SubnetId" : { "Ref" : "PublicSubnet1B"},
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "nat-gw-1b"] ] } }
        ]
      }
    },

    "PrivateRouteTable1a": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "priv-route-1a"] ] } }
        ]
      }
    },

    "PrivateRouteTable1b": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "priv-route-1b"] ] } }
        ]
      }
    },

    "PrivateRoute1a": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1a"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGW1a"
        }
      }
    },

    "PrivateRoute1b": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable1b"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGW1b"
        }
      }
    },

    "PrivateSubnetRouteTableAssociation1a": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1A"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1a"
        }
      }
    },

    "PrivateSubnetRouteTableAssociation1b": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet1B"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable1b"
        }
      }
    },

    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "NotifyEmail" }, "Protocol": "email" } ],
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "sns-email"] ] } }
        ]
      }
    },

    "BastionLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" :  { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, { "Ref" : "BastionKeyName" } ] ] },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionImageID", {"Ref" : "StackRegion"}, "bastion" ] },
        "AssociatePublicIpAddress": true,
        "SecurityGroups" : [ { "Ref" : "BastionSecurityGroup" } ],
        "InstanceType" : { "Ref" : "BastionInstanceType" }
      }
    },

    "BastionASG" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier": [
          { "Ref": "PublicSubnet1A" },
          { "Ref": "PublicSubnet1B" }
        ],
        "LaunchConfigurationName" : { "Ref" : "BastionLaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "NotificationConfiguration" : {
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  "autoscaling:EC2_INSTANCE_TERMINATE",
                                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        },
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "bastion-ec2"] ] },
            "PropagateAtLaunch":"true"
          }
        ]
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true",
          "SuspendProcesses":[
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions"
          ]
        }
      }
    },

    "BastionSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access to Bastion hosts",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "OfficeNetwork1"}
        } ],
        "VpcId": { "Ref": "VPC" },
        "Tags" : [
          {"Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "bastion-sg"] ] } }
        ]
      }
    },

    "EKSControlPlaneIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
          "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
          "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
        ],
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "eks.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        }
      }
    },

    "EKSControlPlaneSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Control Plane access",
        "VpcId"            : { "Ref": "VPC" },
        "SecurityGroupIngress" : [
          {
            "Description": "Allow in a Private Subnet1a",
            "IpProtocol" : "-1",
            "CidrIp"     : {"Ref":  "PrivateSubnet1aCIDR"}
          },
        {
            "Description": "Allow in a Private Subnet1b",
            "IpProtocol" : "-1",
            "CidrIp"     : {"Ref":  "PrivateSubnet1bCIDR"}
          }
        ],
        "Tags" : [
          {
            "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "cp-sg"] ] }
          },
          {
            "Key" : { "Fn::Join" : [ "", [ "kubernetes.io/cluster/", {"Ref" : "AWS::StackName"}] ] },
            "Value" : "owned"
          }
        ]
      }
    },

    "EKSControlPlaneCluster": {
      "Type": "AWS::EKS::Cluster",
      "Properties": {
        "Name": { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "cluster"] ] },
        "ResourcesVpcConfig": {
          "SecurityGroupIds" : [ { "Ref": "EKSControlPlaneSecurityGroup" } ],
          "SubnetIds" : [
            { "Ref": "PrivateSubnet1A" },
            { "Ref": "PrivateSubnet1B" }
          ]
        },
        "RoleArn": { "Fn::GetAtt" : [ "EKSControlPlaneIAMRole", "Arn" ] },
        "Version": "1.13"
      }
    },

    "EKSWorkerNodesSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "WorkerNodes access",
        "VpcId"            : { "Ref": "VPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol": "-1",
            "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" }
          },
          {
            "Description": "Allow in a Private Subnet1a",
            "IpProtocol" : "-1",
            "CidrIp"     : {"Ref":  "PrivateSubnet1aCIDR"}
          },
          {
            "Description": "Allow in a Private Subnet1b",
            "IpProtocol" : "-1",
            "CidrIp"     : {"Ref":  "PrivateSubnet1bCIDR"}
          }
        ],
        "Tags" : [
          {
            "Key" : "Name", "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "k8s-worker-node-sg"] ] }
          },
          {
            "Key" : { "Fn::Join" : [ "", [ "kubernetes.io/cluster/", {"Ref" : "AWS::StackName"}] ] },
            "Value" : "owned"
          }
        ]
      }
    },

    "EKSNodeInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ] }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy",
          "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
          "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
        ]
      }
    },

    "EKSNodeInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "EKSNodeInstanceRole"
        } ]
      }
    },

    "EKSWorkerNodesLaunchConfig":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "IamInstanceProfile": { "Ref": "EKSNodeInstanceProfile"},
        "KeyName" :  { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, { "Ref" : "WorkerNodesKeyName" } ] ] },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionImageID", {"Ref" : "StackRegion"}, "eksworker" ] },
        "SecurityGroups":[
          {
            "Ref":"EKSWorkerNodesSecurityGroup"
          }
        ],
        "InstanceType":"t3.nano",
        "EbsOptimized":"true",
        "AssociatePublicIpAddress": false,
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -xe\n",
          "/etc/eks/bootstrap.sh ", { "Ref" : "AWS::StackName" }, "-cluster >> /var/log/bootstrap.log",
          "\n# Install the files and packages from the metadata\n",
          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource EKSNodeGroup ",
          "         --configsets Install ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "EKSWorkerNodesASGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties":{
        "LaunchConfigurationName":{
          "Ref":"EKSWorkerNodesLaunchConfig"
        },
        "MaxSize": "2",
        "MinSize": "1",
        "DesiredCapacity": "1",
        "VPCZoneIdentifier": [
          { "Ref": "PrivateSubnet1A" },
          { "Ref": "PrivateSubnet1B" }
        ],
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : { "Fn::Join" : [ "-", [ {"Ref" : "AWS::StackName"}, "worker-node"] ] },
            "PropagateAtLaunch":"true"
          },
          {
            "Key" : { "Fn::Join" : [ "", [ "kubernetes.io/cluster/", {"Ref" : "AWS::StackName"}] ] },
            "Value" : "owned",
            "PropagateAtLaunch":"true"
          }
        ]
      },
      "UpdatePolicy":{
        "AutoScalingRollingUpdate":{
          "MinInstancesInService":"1",
          "MaxBatchSize":"1",
          "PauseTime":"PT1M"
        }
      }
    }

  },

  "Outputs" : {

    "K8sCPVPCID" : {
      "Description" : "Kubernetes Control Plane VPC ID",
      "Value" : { "Ref" : "VPC" }
    }
  }

}